---
title: "KedjeBoost ‚Äì Votre resto, en mode turbo !"
author: 
  - Djamal TOE
  - Seydou DRABO
date: "May 27, 2025"
link-citations: true
---

# Pr√©sentation de l'application **KedjenouXpress üçó**

|       **KedjenouXpress** est une application de gestion de ventes con√ßue pour simplifier les op√©rations commerciales dans la restauration. Elle a √©t√© d√©velopp√©e en `2023` pour remplacer les m√©thodes manuelles et offrir une solution num√©rique rapide, intuitive et efficace.

L'interface utilisateur b√©n√©ficie d'un design moderne et agr√©able, gr√¢ce √† l'utilisation de styles personnalis√©s en **CSS** pour am√©liorer l'exp√©rience visuelle et l'ergonomie.

**Skills** : **`Java`**, **`JavFx`**, **`MySql`**, **`Mod√©lisation UML`**, **`POO`**

---

## Technologies utilis√©es

Les outils et technologies suivants ont √©t√© utilis√©s pour d√©velopper le logiciel :

-   **Java (version 8.2)** : choisi pour sa stabilit√© et sa compatibilit√© avec le d√©veloppement d'applications de bureau.
-   **NetBeans** : utilis√© comme environnement de d√©veloppement int√©gr√© (IDE) pour sa simplicit√© et sa bonne int√©gration avec Java.
-   **WAMP** : utilis√© pour h√©berger localement la base de donn√©es et assurer la communication entre l'application et les donn√©es, avec **MySQL** comme syst√®me de gestion de base de donn√©es relationnelle.

---

## Liens de t√©l√©chargement

-   **Java (JDK 8)** : [T√©l√©charger Java JDK (version 8)](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html)\
-   **NetBeans IDE** : [T√©l√©charger NetBeans](https://netbeans.apache.org/download/index.html)\
-   **WAMP Server** : [T√©l√©charger WAMP](https://www.wampserver.com/)

---

## Installation de WAMP Server

WAMP Server (Windows, Apache, MySQL, PHP) est un environnement de d√©veloppement web local. Avant de l'installer, il est important de s'assurer que certaines **d√©pendances logicielles** sont pr√©sentes sur votre syst√®me.

- **1. D√©pendances √† installer**

WAMP Server n√©cessite plusieurs versions du **Microsoft Visual C++ Redistributable**, indispensables au bon fonctionnement d'Apache, MySQL et PHP. Ces biblioth√®ques sont parfois install√©es automatiquement, mais il est recommand√© de les v√©rifier avant.

>>> **Versions requises les plus courantes**

-   Visual C++ 2008 (x86 et x64)
-   Visual C++ 2010 (x86 et x64)
-   Visual C++ 2012 (x86 et x64)
-   Visual C++ 2013 (x86 et x64)
-   Visual C++ 2015-2022 (x86 et x64)

üîó **T√©l√©charger toutes les versions n√©cessaires** ici :\
<https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist>

- **2. T√©l√©chargement de WAMP**

-   Acc√©dez au site officiel : <https://www.wampserver.com>
-   T√©l√©chargez la version correspondant √† votre syst√®me (32 bits ou 64 bits).
-   Enregistrez le fichier `.exe` sur votre ordinateur.

- **3. Installation**

-   Lancez le fichier t√©l√©charg√© (clic droit \> Ex√©cuter en tant qu'administrateur).
-   Suivez les instructions de l'assistant d'installation :
    -   Acceptez le contrat de licence.
    -   Choisissez le r√©pertoire d'installation (par d√©faut : `C:\wamp64\`).
    -   S√©lectionnez votre navigateur par d√©faut si demand√©.
    -   Choisissez √©galement votre √©diteur de texte pr√©f√©r√© (Notepad++ par exemple).
-   Terminez l'installation.

- **4. D√©marrage de WAMP**

-   Ouvrez **WAMP Server** via le menu D√©marrer.

-   Une ic√¥ne appara√Æt dans la barre des t√¢ches :

    -   üü¢ **Vert** : tous les services fonctionnent.

    -   üü° **Orange** : un ou plusieurs services sont arr√™t√©s.

    -   üî¥ **Rouge** : aucun service ne fonctionne.

- **5. V√©rification**

-   Cliquez sur l'ic√¥ne WAMP \> "Localhost" : une page de bienvenue doit s'afficher.
-   Vous pouvez acc√©der √† **phpMyAdmin** pour cr√©er et g√©rer vos bases de donn√©es MySQL.

---

## Architecture de l'application (Mod√®le MVC)

|       L'architecture adopt√©e pour cette application repose sur le mod√®le **MVC** (*Mod√®le-Vue-Contr√¥leur*), un **patron de conception logiciel** qui vise √† **s√©parer clairement les responsabilit√©s** dans une application, particuli√®rement celles disposant d'une interface utilisateur graphique.

Ce d√©coupage permet d'obtenir un code plus **lisible**, **maintenable**, et **facilement √©volutif**. Cela facilite √©galement le travail collaboratif en isolant les t√¢ches : un d√©veloppeur peut travailler sur la logique m√©tier (mod√®le) pendant qu'un autre se concentre sur l'interface (vue).

Le mod√®le `MVC` est compos√© de **trois √©l√©ments fondamentaux** :

- **1. Mod√®le (Model)**

|       Le **mod√®le** contient les **donn√©es de l'application** ainsi que la **logique m√©tier**. Il est responsable de la cr√©ation, la mise √† jour et la validation des donn√©es. Il ne s'occupe jamais de l'affichage.

**Exemple**

``` .java
public class Personne {
    private String nom;
    private int age;

    // Constructeur
    public Personne(String nom, int age) {
        this.nom = nom;
        this.age = age;
    }

    // Accesseurs (getters)
    public String getNom() {
        return nom;
    }

    public int getAge() {
        return age;
    }

    // Modificateurs (setters)
    public void setNom(String nom) {
        this.nom = nom;
    }

    public void setAge(int age) {
        if (age >= 0) {
            this.age = age;
        } else {
            System.out.println("L'√¢ge doit √™tre positif.");
        }
    }

    // M√©thode d'affichage (optionnelle)
    public void afficherInfos() {
        System.out.println("Nom : " + nom + ", √Çge : " + age);
    }
}
```

- **2. Vue (View)**

|       La **vue** est responsable de l'**affichage des donn√©es √† l'utilisateur**. Elle ne contient **aucune logique m√©tier**. Son objectif est uniquement de pr√©senter visuellement les informations issues du mod√®le et de transmettre les actions de l'utilisateur au contr√¥leur.

**Exemple FXML (JavaFX)** d'une vue simple avec un bouton :

```md
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane xmlns:fx="http://javafx.com/fxml" fx:controller="monappli.controllers.PersonneController">
    <children>
        <Button text="Afficher les infos" layoutX="100" layoutY="80" onAction="#afficherInfos"/>
    </children>
</AnchorPane>
```

Ce fichier FXML d√©finit une fen√™tre avec un bouton qui, lorsqu'il est cliqu√©, d√©clenche une m√©thode du contr√¥leur (nomm√©e `afficherInfos`).

- **3. Contr√¥leur (Controller)**

|       Le **contr√¥leur** fait le lien entre la **vue** et le **mod√®le**. Il :

-   intercepte les **actions de l'utilisateur** (clics, saisies, etc.),
-   met √† jour le **mod√®le** en fonction des actions,
-   demande √† la **vue** de s'actualiser.

**Exemple de classe contr√¥leur JavaFX associ√©e √† la vue pr√©c√©dente :**

``` .java
package monappli.controllers;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import monappli.models.Personne;

public class PersonneController {
    private Personne personne;

    public PersonneController() {
        // Cr√©ation d'un objet Personne par d√©faut
        this.personne = new Personne("Jean", 28);
    }

    @FXML
    public void afficherInfos(ActionEvent event) {
        personne.afficherInfos();
    }
}
```

---

## Gestion de la base de donn√©es

|       Pour la gestion des donn√©es, le projet s'appuie sur **MySQL**, un *syst√®me de gestion de base de donn√©es relationnelle (SGBDR)* largement utilis√© dans les applications professionnelles. L'interaction entre l'application Java et la base de donn√©es a √©t√© rendue possible gr√¢ce au **package `mysql-connector-java`**, t√©l√©charg√© puis int√©gr√© comme **d√©pendance** dans le projet.

Cela a permis de **stocker localement les donn√©es**, d'assurer leur **persistence** et d'y acc√©der efficacement via des **requ√™tes SQL**.

>> **Requ√™tes SQL utilis√©es**

Plusieurs types de requ√™tes ont √©t√© impl√©ment√©s dans le cadre de ce projet, notamment :

-   `INSERT INTO` : pour l'insertion de nouvelles donn√©es (ex. : ajout d'un produit ou d'un utilisateur) ;
-   `SELECT` : pour la r√©cup√©ration et l'affichage des donn√©es (liste des ventes, employ√©s, inventaire, etc.) ;
-   `UPDATE` : pour la mise √† jour d'enregistrements (ex. : modifier un produit) ;
-   `DELETE` : pour la suppression de donn√©es obsol√®tes ou incorrectes.

>> **Optimisation par jointures**

|       Des **jointures (`JOIN`)** ont √©galement √©t√© utilis√©es pour relier plusieurs tables par exemple, les ventes, les utilisateurs et les produits, afin de produire des rapports d√©taill√©s, et **d'optimiser les filtres et recherches complexes**.

> **Remarque** : Cette architecture relationnelle a √©t√© choisie pour sa **fiabilit√©**, sa **performance** et sa **compatibilit√©** avec les outils de d√©veloppement Java.

---

# Pr√©sentation de l'interface

## Demarrage de l'application

|       Apr√®s la compilation et la transformation en application ex√©cutable, les d√©pendances n√©cessaires notamment `Java 8.2` pour le bon fonctionnement des packages requis, ainsi que le serveur WAMP pour la gestion des bases de donn√©es doivent √™tre install√©es sur la machine r√©ceptrice. Une fois ces √©tapes termin√©es, un raccourci de l'application est cr√©√© et plac√© sur le bureau.

```{r, echo=FALSE}
#| fig-cap: "Icone de l' application"
#| label: iconeapplibureau
knitr::include_graphics("img1.png")
```


Pour d√©marrer l'application, il est recommand√© de faire un `clic droit` sur l'`ic√¥ne de l'application`, puis de s√©lectionner `Ex√©cuter en tant qu'administrateur`. Cela ouvrira la premi√®re page, qui correspond √† la page d'accueil.

---

## √âcran d'accueil

|       Au d√©marrage de l'application, une interface d'accueil a √©t√© d√©velopp√©e. Elle permet √† l'utilisateur de se connecter soit en `mode administrateur`, soit en `mode utilisateur`. Chaque mode requiert la saisie d'un `identifiant` et d'un `mot de passe`.

Un `bouton "Quitter"` est √©galement disponible en bas de l'√©cran. En cas de tentative de fermeture de l'application, une `bo√Æte de confirmation` s'affiche afin d'√©viter toute fermeture accidentelle.

**Vid√©o de d√©monstration**

{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 1.mp4 >}}

---

## Partie Administrateur

|       La section `Administrateur` de l'application est constitu√©e de `six interfaces principales`, chacune ayant un r√¥le sp√©cifique dans la gestion et le suivi des activit√©s. Ces interfaces sont les suivantes :

**1. `Inventaires`** : permet l'enregistrement et la gestion des `produits` disponibles en stock.


{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 2.mp4 >}}


**2. `Employ√©s`** : destin√©e √† l'enregistrement et au suivi des `employ√©s` (vendeurs, caissiers, etc.).

{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 3.mp4>}


**3. `Ventes`** : affiche la liste des **produits vendus** et permet de suivre les transactions r√©alis√©es.


{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 4.mp4 >}}


**4. `Tableau de bord (Dashboard)`** : fournit une vue **r√©capitulative** des ventes et autres indicateurs cl√©s pour une vision globale de l'activit√©.

{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 5.mp4>}}


**5. ``Rapports``** : g√©n√®re et permet d'**imprimer des rapports de vente**, facilitant ainsi l'analyse et le suivi.

{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 6.mp4>}}


**6. `Param√®tres`** : offre des options de **`personnalisation de l'application`** - changement du nom de l'entreprise, de l'adresse, des informations de contact, etc.


```{r, fig.align='center', out.width="90%", out.height="80%", echo=FALSE}
#| fig-cap: "Interface Admin- Param√®tre"
#| label: settings
knitr::include_graphics("img_fin.png")
```

---

## Utilisateurs

|       Cette interface a √©t√© con√ßue pour √™tre utilis√©e par les **`vendeurs`** ou **`caissiers`** op√©rant dans l'entreprise. Elle se compose de **`quatre sous-interfaces`**, chacune ayant un r√¥le bien d√©fini :

**1. `Interface principale`**

Elle permet :

-   de **vendre un produit en stock**,
-   d'**imprimer la facture** de la commande une fois valid√©e,
-   d'**enregistrer le mode de paiement** : en esp√®ces (cash), via des services de monnaie √©lectronique (**Orange Money**, **Moov Money**) ou encore d'enregistrer une **commande diff√©r√©e**, √† r√©gler ult√©rieurement.

**2. `Interface "Voir Commande`**

Cette interface permet de :

-   **rechercher une commande en attente**,
-   **valider** ou **annuler** une commande lanc√©e pr√©c√©demment.

**3. `Interface "G√©rer les rapports de vente`**

Elle offre la possibilit√© de :

-   **s√©lectionner une date ou une plage de dates**,
-   **imprimer les ventes r√©alis√©es** par le caissier connect√©,
-   **afficher le total des ventes**, √† la fois en montant (prix) et en quantit√© pour la p√©riode s√©lectionn√©e.


{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 7.mp4>}}


**4. Interface "√âtat des serveurs**

Cette derni√®re interface donne une vue d'ensemble sur :

-   les **quantit√©s** et **totaux vendus**,
-   r√©partis **par serveur** (vendeur),
-   afin de faciliter le **suivi des performances individuelles**.


{{< video https://djamal2905.github.io/djamal_website/INFO_MINI_PROJETS/JavaApp/video 8.mp4>}}


**NB : Cette interface est √©galement accessible depuis la section Administrateur, ce qui permet √† la direction de superviser les activit√©s des vendeurs en temps r√©el.**

---
